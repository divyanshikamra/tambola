{"version":3,"sources":["todos.js","Addtodo.js","Todos1.js","Addtodo1.js","App.js","serviceWorker.js","index.js","lahs.jpeg"],"names":["Todos","todos","deletetodo","todolist","length","map","todo","className","key","content","onClick","id","Addtodo","state","handlechange","e","setState","target","value","handlesubmit","preventDefault","props","addtodo","onSubmit","this","type","onChange","Component","Todos1","todos1","deletetodo1","todo1list","Addtodo1","addtodo1","App","filter","Math","random","src","lahs","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.8852f45c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Todos = ({todos, deletetodo}) =>{\n    const todolist = todos.length ? (\n        todos.map(todo =>{\n            return <div className=\"collection-item\" key='todo.id'>\n                <p>{todo.content}</p>\n                <button onClick={() => {deletetodo(todo.id)}}>Remove</button>\n                \n            </div>\n        })\n    ) : (\n        <p className=\"center\">No Winners yet !</p>\n    )\n    return <div className=\"todos collection\">\n            {todolist}\n    </div>\n}\n\nexport default Todos","import React, {Component} from 'react'\n\nclass Addtodo extends Component{\n    state = {\n        content : null\n    }\n    handlechange = (e) =>{\n        this.setState({\n            content : e.target.value\n        })\n    }\n    handlesubmit = (e) =>{\n        e.preventDefault();\n        this.props.addtodo(this.state)\n        this.setState({\n            content:''\n        })\n    }\n    render(){\n        return(\n            <form onSubmit={this.handlesubmit}>\n                <label>Update Winners : </label>\n                <input type=\"text\" id=\"content\" onChange={this.handlechange} value={this.state.content} />\n                <button className=\"right\">Add</button>\n            </form>\n        )\n    }\n}\n\nexport default Addtodo","import React from 'react'\n\nconst Todos1 = ({todos1, deletetodo1}) =>{\n    const todo1list = todos1.length ? (\n        todos1.map(todo =>{\n            return <div className=\"collection-item\" key='todo.id'>\n                <p>{todo.content}</p>\n                <button onClick={() => {deletetodo1(todo.id)}}>Remove</button>\n                \n            </div>\n        })\n    ) : (\n        <p className=\"center\">No Award's left !</p>\n    )\n    return <div className=\"todos collection\">\n            {todo1list}\n    </div>\n}\n\nexport default Todos1","import React, {Component} from 'react'\n\nclass Addtodo1 extends Component{\n    state = {\n        content : null\n    }\n    handlechange = (e) =>{\n        this.setState({\n            content : e.target.value\n        })\n    }\n    handlesubmit = (e) =>{\n        e.preventDefault();\n        this.props.addtodo1(this.state)\n        this.setState({\n            content:''\n        })\n    }\n    render(){\n        return(\n            <form onSubmit={this.handlesubmit}>\n                <label>Update Awards : </label>\n                <input type=\"text\" id=\"content\" onChange={this.handlechange} value={this.state.content} />\n                <button className=\"right\">Add</button>\n            </form>\n        )\n    }\n}\n\nexport default Addtodo1","import React, {Component} from 'react';\nimport Todos from './todos'\nimport Addtodo from './Addtodo'\nimport Todos1 from './Todos1'\nimport Addtodo1 from './Addtodo1'\nimport lahs from './lahs.jpeg'\n\nclass App extends Component{\n  state =  {\n    todos : [\n      {id : 1, content : \"full house 1 -  priyansh !\"},\n      {id : 2, content : \"first line - gautam !\"}\n    ],\n    todos1 : [\n      // {id : 1, content : \"last line!\"},\n      // {id : 2, content : \"bamboo !\"},\n      // {id : 3, content : \"corners!\"},\n      // {id : 4, content : \"middle line!\"}\n    ]\n  }\n  deletetodo = (id) => {\n    let todos = this.state.todos.filter(todo =>{\n      return todo.id !== id\n    })\n    this.setState({\n      todos\n    })\n  } \n  deletetodo1 = (id) => {\n    let todos1 = this.state.todos1.filter(todo =>{\n      return todo.id !== id\n    })\n    this.setState({\n      todos1\n    })\n  } \n  addtodo = (todo) =>{\n    todo.id = Math.random()\n    let todos = [...this.state.todos, todo]\n    this.setState({\n      todos : todos\n    })\n  }\n  addtodo1 = (todo) =>{\n    todo.id = Math.random()\n    let todos1 = [...this.state.todos1, todo]\n    this.setState({\n      todos1 : todos1\n    })\n  }\n  render(){\n  return (\n    <div className=\"todo-app\">\n      <img src={lahs} alt=\"lahs-img\"></img>\n      <h1 className=\"todo-heading center red-text\">\n        Tambola\n      </h1>\n      <h2 className=\"todo-heading center blue-text\">\n        Winner List\n      </h2>\n      <div className=\"Todo-List container\">\n        <Todos todos={this.state.todos} deletetodo={this.deletetodo} />\n        <Addtodo addtodo={this.addtodo} />\n      </div>\n      <h2 className=\"todo-heading center blue-text\">\n          Awards Left\n      </h2>\n      <div className=\"Todo-List container\">\n        <Todos1 todos1={this.state.todos1} deletetodo1={this.deletetodo1} />\n        <Addtodo1 addtodo1={this.addtodo1} />\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/lahs.d4c84980.jpeg\";"],"sourceRoot":""}